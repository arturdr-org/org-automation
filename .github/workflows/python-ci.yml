name: 🐍 Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'
  
jobs:
  quality-checks:
    name: 🔍 Quality & Security Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 🎨 Code Formatting Check (Black)
        run: |
          black --check --diff .
          
      - name: 📏 Import Sorting Check (isort)
        run: |
          isort --check-only --diff .

      - name: 🔍 Linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: 🏷️ Type Checking (MyPy)
        run: |
          mypy . --ignore-missing-imports || echo "MyPy check completed with warnings"

      - name: 🛡️ Security Scan (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || echo "Security scan completed"
          
      - name: 🔒 Dependency Security Check
        run: |
          safety check --json --output safety-report.json || echo "Safety check completed"

      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  tests:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: 🧪 Run Tests
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --junitxml=pytest.xml -v

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest.xml
            htmlcov/

  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    if: github.event_name == 'release'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install Build Tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build Distribution
        run: |
          python -m build

      - name: 🔍 Check Distribution
        run: |
          twine check dist/*

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  security-analysis:
    name: 🔒 CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-extended,security-and-quality

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-checks, tests]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Dev Environment
        run: |
          echo "🚀 Deploying to development environment..."
          # Add your deployment logic here
          echo "✅ Development deployment completed!"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-analysis]
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: 📤 Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          twine upload dist/*

      - name: 🌟 Deploy to Production Environment
        run: |
          echo "🌟 Deploying to production environment..."
          # Add your deployment logic here
          echo "✅ Production deployment completed!"

  notification:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-dev]
    if: always()
    
    steps:
      - name: 📊 Create Deployment Summary
        run: |
          echo "## 📊 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-production.result || needs.deploy-dev.result || 'Completed' }}" >> $GITHUB_STEP_SUMMARY