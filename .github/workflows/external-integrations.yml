# üåê External Integrations - Notifications & Monitoring
# Workflow para integra√ß√£o com servi√ßos externos (Slack, Teams, monitoring)

name: "üåê External Integrations"

on:
  # Triggers para notifica√ß√µes
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, closed, reopened ]
  issues:
    types: [ opened, closed, labeled ]
  workflow_run:
    workflows: 
      - "CI/CD - Build, Test & Quality"
      - "üõ°Ô∏è Security Audit"
    types: [ completed ]
  workflow_dispatch:
    inputs:
      notification_type:
        description: 'Type of notification to send'
        required: false
        default: 'status'
        type: choice
        options:
          - status
          - deployment
          - security
          - metrics

env:
  PYTHON_VERSION: '3.9'

jobs:
  # ============================================
  # üì¢ Slack Notifications
  # ============================================
  slack-notifications:
    name: "üì¢ Slack Notifications"
    runs-on: ubuntu-latest
    if: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
    
    - name: "üìä Determine Notification Type"
      id: notification-type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          echo "type=workflow_status" >> $GITHUB_OUTPUT
          echo "title=üîÑ Workflow Completed" >> $GITHUB_OUTPUT
          echo "color=#36a64f" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "type=deployment" >> $GITHUB_OUTPUT
          echo "title=üöÄ Main Branch Updated" >> $GITHUB_OUTPUT
          echo "color=#0099ff" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "type=pr_activity" >> $GITHUB_OUTPUT
          echo "title=üîÄ Pull Request Activity" >> $GITHUB_OUTPUT
          echo "color=#ff9900" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "issues" ]]; then
          echo "type=issue_activity" >> $GITHUB_OUTPUT
          echo "title=üìù Issue Activity" >> $GITHUB_OUTPUT
          echo "color=#cc0000" >> $GITHUB_OUTPUT
        else
          echo "type=general" >> $GITHUB_OUTPUT
          echo "title=‚ÑπÔ∏è Repository Activity" >> $GITHUB_OUTPUT
          echo "color=#666666" >> $GITHUB_OUTPUT
        fi
    
    - name: "üì§ Send Slack Notification"
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        channel: '#AI-powered-org-automation-suite'
        username: 'AI-powered-org-automation-suite-bot'
        icon_emoji: ':robot_face:'
        custom_payload: |
          {
            "attachments": [{
              "color": "${{ steps.notification-type.outputs.color }}",
              "title": "${{ steps.notification-type.outputs.title }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Event",
                  "value": "${{ github.event_name }}",
                  "short": true
                },
                {
                  "title": "Branch/Ref",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Actor",
                  "value": "${{ github.actor }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "`${{ github.sha }}`",
                  "short": false
                }
              ],
              "actions": [
                {
                  "type": "button",
                  "text": "View on GitHub",
                  "url": "${{ github.event.repository.html_url }}"
                }
              ],
              "footer": "AI-powered-org-automation-suite",
              "ts": ${{ github.event.head_commit.timestamp && github.event.head_commit.timestamp || 'Math.floor(Date.now() / 1000)' }}
            }]
          }

  # ============================================
  # üí¨ Microsoft Teams Notifications
  # ============================================
  teams-notifications:
    name: "üí¨ Teams Notifications"
    runs-on: ubuntu-latest
    if: ${{ secrets.TEAMS_WEBHOOK_URL }}
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
    
    - name: "üéØ Determine Teams Card Type"
      id: card-type
      run: |
        if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          echo "theme_color=00ff00" >> $GITHUB_OUTPUT
          echo "summary=Workflow completed for AI-powered-org-automation-suite" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          echo "theme_color=0078d4" >> $GITHUB_OUTPUT
          echo "summary=New commits pushed to AI-powered-org-automation-suite" >> $GITHUB_OUTPUT
        else
          echo "theme_color=666666" >> $GITHUB_OUTPUT
          echo "summary=Repository activity in AI-powered-org-automation-suite" >> $GITHUB_OUTPUT
        fi
    
    - name: "üì§ Send Teams Notification"
      run: |
        curl -X POST ${{ secrets.TEAMS_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "themeColor": "${{ steps.card-type.outputs.theme_color }}",
            "summary": "${{ steps.card-type.outputs.summary }}",
            "sections": [{
              "activityTitle": "ü§ñ AI-powered-org-automation-suite Activity",
              "activitySubtitle": "${{ github.event_name }} by ${{ github.actor }}",
              "facts": [
                {
                  "name": "Repository:",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Event:",
                  "value": "${{ github.event_name }}"
                },
                {
                  "name": "Branch:",
                  "value": "${{ github.ref_name }}"
                },
                {
                  "name": "Commit:",
                  "value": "${{ github.sha }}"
                }
              ]
            }],
            "potentialAction": [{
              "@type": "OpenUri",
              "name": "View on GitHub",
              "targets": [{
                "os": "default",
                "uri": "${{ github.event.repository.html_url }}"
              }]
            }]
          }'

  # ============================================
  # üìä Monitoring & Metrics Integration
  # ============================================
  monitoring-integration:
    name: "üìä Monitoring Integration"
    runs-on: ubuntu-latest
    if: ${{ inputs.notification_type == 'metrics' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
    
    - name: "üêç Setup Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: "üì¶ Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: "üìà Send Metrics to Datadog (if configured)"
      if: ${{ secrets.DATADOG_API_KEY }}
      run: |
        python -c "
        import requests
        import json
        from datetime import datetime
        import os
        
        # M√©tricas b√°sicas do workflow
        metrics = [
            {
                'metric': 'github.workflow.execution',
                'points': [(int(datetime.now().timestamp()), 1)],
                'tags': [
                    'repository:${{ github.repository }}',
                    'workflow:external-integrations',
                    'branch:${{ github.ref_name }}',
                    'actor:${{ github.actor }}'
                ]
            },
            {
                'metric': 'github.repository.activity',
                'points': [(int(datetime.now().timestamp()), 1)],
                'tags': [
                    'repository:${{ github.repository }}',
                    'event_type:${{ github.event_name }}',
                    'branch:${{ github.ref_name }}'
                ]
            }
        ]
        
        headers = {
            'Content-Type': 'application/json',
            'DD-API-KEY': '${{ secrets.DATADOG_API_KEY }}'
        }
        
        response = requests.post(
            'https://api.datadoghq.com/api/v1/series',
            headers=headers,
            data=json.dumps({'series': metrics})
        )
        
        if response.status_code == 202:
            print('‚úÖ M√©tricas enviadas para Datadog com sucesso')
        else:
            print(f'‚ùå Erro ao enviar m√©tricas: {response.status_code}')
            print(response.text)
        "
    
    - name: "üîî Custom Webhook Integration"
      if: ${{ secrets.CUSTOM_WEBHOOK_URL }}
      run: |
        curl -X POST ${{ secrets.CUSTOM_WEBHOOK_URL }} \
          -H "Content-Type: application/json" \
          -d '{
            "source": "AI-powered-org-automation-suite",
            "event_type": "${{ github.event_name }}",
            "repository": "${{ github.repository }}",
            "branch": "${{ github.ref_name }}",
            "commit": "${{ github.sha }}",
            "actor": "${{ github.actor }}",
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'

  # ============================================
  # üö® Alert Management
  # ============================================
  alert-management:
    name: "üö® Alert Management"
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
    - name: "üì• Checkout Code"
      uses: actions/checkout@v4
    
    - name: "üö® PagerDuty Alert (Critical Failures)"
      if: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}
      run: |
        curl -X POST https://events.pagerduty.com/v2/enqueue \
          -H "Content-Type: application/json" \
          -d '{
            "routing_key": "${{ secrets.PAGERDUTY_INTEGRATION_KEY }}",
            "event_action": "trigger",
            "payload": {
              "summary": "Critical workflow failure in AI-powered-org-automation-suite",
              "severity": "critical",
              "source": "${{ github.repository }}",
              "component": "github-actions",
              "group": "ci-cd",
              "class": "workflow-failure",
              "custom_details": {
                "workflow": "${{ github.event.workflow_run.name }}",
                "branch": "${{ github.ref_name }}",
                "commit": "${{ github.sha }}",
                "actor": "${{ github.actor }}",
                "workflow_run_url": "${{ github.event.workflow_run.html_url }}"
              }
            }
          }'
    
    - name: "üìß Email Alert (Backup)"
      run: |
        echo "üìß Backup email alert would be sent here"
        echo "Workflow: ${{ github.event.workflow_run.name }}"
        echo "Status: ${{ github.event.workflow_run.conclusion }}"
        echo "Repository: ${{ github.repository }}"
        echo "Time: $(date)"

  # ============================================
  # üìã Integration Summary
  # ============================================
  integration-summary:
    name: "üìã Integration Summary"
    runs-on: ubuntu-latest
    needs: [slack-notifications, teams-notifications, monitoring-integration, alert-management]
    if: always()
    
    steps:
    - name: "üìä Generate Integration Summary"
      run: |
        echo "## üåê External Integrations Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Slack | ${{ needs.slack-notifications.result == 'success' && '‚úÖ Sent' || needs.slack-notifications.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Notifications sent to #AI-powered-org-automation-suite |" >> $GITHUB_STEP_SUMMARY
        echo "| Teams | ${{ needs.teams-notifications.result == 'success' && '‚úÖ Sent' || needs.teams-notifications.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Cards sent to configured channel |" >> $GITHUB_STEP_SUMMARY
        echo "| Monitoring | ${{ needs.monitoring-integration.result == 'success' && '‚úÖ Updated' || needs.monitoring-integration.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} | Metrics sent to Datadog/webhooks |" >> $GITHUB_STEP_SUMMARY
        echo "| Alerts | ${{ needs.alert-management.result == 'success' && 'üö® Triggered' || needs.alert-management.result == 'skipped' && '‚è≠Ô∏è No Issues' || '‚ùå Failed' }} | PagerDuty/email alerts |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Configuration Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Slack**: ${{ secrets.SLACK_WEBHOOK_URL && '‚úÖ Configured' || '‚ùå Not Configured' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Teams**: ${{ secrets.TEAMS_WEBHOOK_URL && '‚úÖ Configured' || '‚ùå Not Configured' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Datadog**: ${{ secrets.DATADOG_API_KEY && '‚úÖ Configured' || '‚ùå Not Configured' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **PagerDuty**: ${{ secrets.PAGERDUTY_INTEGRATION_KEY && '‚úÖ Configured' || '‚ùå Not Configured' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Event**: ${{ github.event_name }} | **Repository**: ${{ github.repository }} | **Time**: $(date)" >> $GITHUB_STEP_SUMMARY