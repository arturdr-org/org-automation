# 🚀 CI/CD Pipeline - Build, Test & Quality Analysis
# Workflow modernizado com integração de ferramentas especializadas

name: "CI/CD - Build, Test & Quality"

on:
  push:
    branches: [ main, develop, "feature/*" ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for urgent fixes)'
        required: false
        default: false
        type: boolean
      deploy_environment:
        description: 'Deploy environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  
jobs:
  # ============================================
  # 🔍 Code Quality Analysis
  # ============================================
  code-quality:
    name: "🔍 Code Quality Analysis"
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for SonarCloud
    
    - name: "🐍 Setup Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: "📦 Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety flake8 black isort
        
    - name: "🎨 Code Formatting Check"
      run: |
        echo "🎨 Verificando formatação com Black..."
        black --check --diff .
        echo "📦 Verificando imports com isort..."
        isort --check-only --diff .
        echo "🔍 Verificando estilo com Flake8..."
        flake8 . --count --show-source --statistics
    
    - name: "🔒 Security Analysis with Bandit"
      run: |
        echo "🔒 Executando análise de segurança com Bandit..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
        
    - name: "🛡️ Dependency Security Check"
      run: |
        echo "🛡️ Verificando vulnerabilidades em dependências..."
        safety check --json --output safety-report.json || true
        safety check
        
    - name: "🧪 Run Tests with Coverage"
      run: |
        echo "🧪 Executando testes com cobertura..."
        pytest tests/ --cov=core --cov=modules --cov=common \
          --cov-report=xml --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=pytest.xml
    
    - name: "📊 SonarCloud Analysis"
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=arturdr-org_AI-powered-org-automation-suite
          -Dsonar.organization=arturdr-org
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.python.xunit.reportPath=pytest.xml
          -Dsonar.python.bandit.reportPaths=bandit-report.json
    
    - name: "📤 Upload Coverage to Codecov"
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: AI-powered-org-automation-suite-coverage
        fail_ci_if_error: false
        
    - name: "💾 Upload Test Results"
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          pytest.xml
          coverage.xml
          bandit-report.json
          safety-report.json

  # ============================================
  # 🛡️ Security Scanning  
  # ============================================
  security-scan:
    name: "🛡️ Security Scanning"
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v5
    
    - name: "🔍 CodeQL Analysis"
      uses: github/codeql-action/init@v2
      with:
        languages: python
        queries: security-extended,security-and-quality
        
    - name: "🔬 Run CodeQL Analysis"
      uses: github/codeql-action/analyze@v2
    
    - name: "🐍 Snyk Security Scan"
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=requirements.txt
        command: test
        
    - name: "🐍 Snyk Monitor"
      uses: snyk/actions/python@master
      if: github.ref == 'refs/heads/main'
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --file=requirements.txt

  # ============================================
  # 🏗️ Build & Integration Tests
  # ============================================
  build-test:
    name: "🏗️ Build & Integration Tests"
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v5
    
    - name: "🐍 Setup Python ${{ matrix.python-version }}"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: "📦 Install Dependencies"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: "🧪 Run Integration Tests"
      run: |
        echo "🧪 Executando testes de integração..."
        python -m pytest tests/ -v --tb=short
        
    - name: "✅ Import Tests"
      run: |
        echo "✅ Testando imports dos módulos..."
        python -c "import core.automation.main; print('✅ core.automation.main')"
        python -c "import core.monitoring.dashboard; print('✅ core.monitoring.dashboard')"
        python -c "import core.monitoring.health_check; print('✅ core.monitoring.health_check')"
        echo "🎉 Todos os imports funcionais!"
    
    - name: "🏗️ Build Package"
      run: |
        echo "🏗️ Criando pacote Python..."
        python setup.py sdist bdist_wheel
        
    - name: "💾 Upload Build Artifacts"
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.9'
      with:
        name: python-package
        path: dist/

  # ============================================
  # 🚀 Deploy (Conditional)
  # ============================================
  deploy:
    name: "🚀 Deploy to ${{ inputs.deploy_environment || 'staging' }}"
    runs-on: ubuntu-latest
    needs: [build-test]
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'workflow_dispatch' || github.event_name == 'push')
    environment: ${{ inputs.deploy_environment || 'staging' }}
    
    steps:
    - name: "📥 Checkout Code"
      uses: actions/checkout@v5
      
    - name: "📤 Download Build Artifacts"
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: "🎯 Deploy Package"
      run: |
        echo "🚀 Iniciando deploy para ${{ inputs.deploy_environment || 'staging' }}..."
        echo "📦 Pacotes disponíveis:"
        ls -la dist/
        echo "✅ Deploy simulado concluído!"
        
    - name: "📊 Deployment Summary"
      run: |
        echo "### 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ inputs.deploy_environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: $(python setup.py --version)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${GITHUB_SHA:0:7}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # 📊 Workflow Summary
  # ============================================
  summary:
    name: "📊 Workflow Summary"
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, build-test, deploy]
    if: always()
    
    steps:
    - name: "📋 Generate Summary"
      run: |
        echo "## 🎯 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deploy | ${{ needs.deploy.result == 'success' && '✅ Deployed' || needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 Quality Metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **SonarCloud**: [View Report](https://sonarcloud.io/project/overview?id=arturdr-org_AI-powered-org-automation-suite)" >> $GITHUB_STEP_SUMMARY
        echo "- **Codecov**: [View Coverage](https://codecov.io/gh/arturdr-org/AI-powered-AI-powered-org-automation-suite-suite)" >> $GITHUB_STEP_SUMMARY
        echo "- **Snyk**: Security vulnerabilities checked" >> $GITHUB_STEP_SUMMARY