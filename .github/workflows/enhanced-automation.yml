name: üöÄ Enhanced Organization Automation

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Execute em modo DRY-RUN (sem fazer altera√ß√µes)"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
      target_repos:
        description: "Reposit√≥rios espec√≠ficos (separados por v√≠rgula, vazio = todos)"
        required: false
        default: ""
  schedule:
    # Executa diariamente √†s 2:00 UTC (23:00 no hor√°rio de Bras√≠lia)
    - cron: '0 2 * * *'
  push:
    branches: [main]
    paths:
      - 'config/**'
      - 'enhanced_automation.py'
      - '.github/workflows/enhanced-automation.yml'

env:
  ORG_NAME: arturdr-org
  PROJECT_NUMBER: 1

jobs:
  automation:
    name: üîß Executar Automa√ß√£o da Organiza√ß√£o
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      issues: write
      pull-requests: write
      repository-projects: write

    steps:
      - name: üì• Checkout do reposit√≥rio
        uses: actions/checkout@v4

      - name: üîë Criar token do GitHub App
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ORG_APP_ID }}
          private-key: ${{ secrets.ORG_APP_PRIVATE_KEY }}
          owner: arturdr-org

      - name: üêç Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: üì¶ Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ‚öôÔ∏è Resolver token de autentica√ß√£o
        run: |
          if [ -n "${{ steps.app-token.outputs.token }}" ]; then
            echo "ORG_AUTOMATION_PAT=${{ steps.app-token.outputs.token }}" >> $GITHUB_ENV
            echo "‚úÖ Usando token do GitHub App"
          elif [ -n "${{ secrets.ORG_AUTOMATION_PAT }}" ]; then
            echo "ORG_AUTOMATION_PAT=${{ secrets.ORG_AUTOMATION_PAT }}" >> $GITHUB_ENV
            echo "‚úÖ Usando PAT do reposit√≥rio"
          else
            echo "‚ùå Nenhum token dispon√≠vel (GitHub App ou PAT)"
            exit 1
          fi

      - name: üîç Validar configura√ß√µes
        run: |
          echo "üè¢ Organiza√ß√£o: ${{ env.ORG_NAME }}"
          echo "üìä N√∫mero do projeto: ${{ env.PROJECT_NUMBER }}"
          echo "üß™ Modo DRY-RUN: ${{ inputs.dry_run || 'false' }}"
          echo "üéØ Reposit√≥rios espec√≠ficos: ${{ inputs.target_repos || 'todos' }}"
          
          # Verificar se os arquivos de configura√ß√£o existem
          echo "üìã Verificando arquivos de configura√ß√£o:"
          for file in config/labels.yml config/branch_protection.yml config/CODEOWNERS; do
            if [ -f "$file" ]; then
              echo "  ‚úÖ $file"
            else
              echo "  ‚ùå $file (n√£o encontrado)"
            fi
          done
          
          echo "üìÑ Verificando templates:"
          for template in config/templates/*.md; do
            if [ -f "$template" ]; then
              echo "  ‚úÖ $template"
            else
              echo "  ‚ùå $template (n√£o encontrado)"
            fi
          done

      - name: üöÄ Executar automa√ß√£o da organiza√ß√£o
        env:
          DRY_RUN: ${{ inputs.dry_run || 'false' }}
          TARGET_REPOS: ${{ inputs.target_repos || '' }}
        run: |
          echo "üé¨ Iniciando automa√ß√£o..."
          python enhanced_automation.py

      - name: üìä Upload do relat√≥rio de automa√ß√£o
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: automation-report-${{ github.run_number }}
          path: |
            automation_report_*.txt
            automation.log
          retention-days: 30

      - name: üìà Resumo da execu√ß√£o
        if: always()
        run: |
          echo "## üìä Resumo da Automa√ß√£o da Organiza√ß√£o" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- üè¢ **Organiza√ß√£o**: ${{ env.ORG_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- ‚è∞ **Executado em**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- üß™ **Modo**: ${{ inputs.dry_run == 'true' && 'DRY-RUN' || 'PRODU√á√ÉO' }}" >> $GITHUB_STEP_SUMMARY
          echo "- üéØ **Reposit√≥rios**: ${{ inputs.target_repos || 'Todos da organiza√ß√£o' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f automation.log ]; then
            echo "### üìã √öltimas linhas do log:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -n 20 automation.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  notification:
    name: üì¢ Notifica√ß√£o
    needs: automation
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'schedule'
    
    steps:
      - name: üîî Criar issue em caso de falha
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `üö® Falha na Automa√ß√£o da Organiza√ß√£o - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            A automa√ß√£o da organiza√ß√£o falhou durante a execu√ß√£o programada.
            
            **Detalhes:**
            - üè¢ Organiza√ß√£o: ${{ env.ORG_NAME }}
            - ‚è∞ Executado em: ${new Date()}
            - üîó Execu√ß√£o: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Por favor, verifique os logs para mais detalhes.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['automation', 'priority:high', 'type:bugfix']
            });