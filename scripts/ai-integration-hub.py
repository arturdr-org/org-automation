#!/usr/bin/env python3
"""
ü§ñ AI Integration Hub - Hub Central para M√∫ltiplos Sistemas de IA

Este script serve como hub central para integrar e coordenar m√∫ltiplos
sistemas de IA (Claude, GPT, Gemini, etc.) com o manual de opera√ß√µes,
permitindo opera√ß√µes aut√¥nomas colaborativas entre diferentes IAs.

Autor: Sistema AI-Powered
Vers√£o: 1.0.0
"""

import json
import os
import sys
import logging
import argparse
import asyncio
import aiohttp
import time
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from enum import Enum
from pathlib import Path

# ============================================
# üèóÔ∏è Configura√ß√£o e Tipos de Dados
# ============================================

class AIProvider(Enum):
    """Provedores de IA suportados"""
    CLAUDE = "claude"
    GPT = "gpt"
    GEMINI = "gemini"
    GITHUB_COPILOT = "github_copilot"
    LOCAL_LLM = "local_llm"
    WARP_AGENT = "warp_agent"

class RequestStatus(Enum):
    """Status das requisi√ß√µes de IA"""
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

@dataclass
class AIRequest:
    """Estrutura de uma requisi√ß√£o de IA"""
    id: str
    provider: AIProvider
    operation: str
    parameters: Dict[str, Any]
    priority: int = 5  # 1=highest, 10=lowest
    created_at: datetime = None
    status: RequestStatus = RequestStatus.PENDING
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    execution_time: Optional[float] = None
    
    def __post_init__(self):
        if self.created_at is None:
            self.created_at = datetime.now(timezone.utc)

@dataclass
class AIResponse:
    """Estrutura de uma resposta de IA"""
    request_id: str
    provider: AIProvider
    success: bool
    data: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    completed_at: datetime = None
    
    def __post_init__(self):
        if self.completed_at is None:
            self.completed_at = datetime.now(timezone.utc)

# ============================================
# üß† Classe Principal do Hub de IA
# ============================================

class AIIntegrationHub:
    """Hub central para integra√ß√£o de m√∫ltiplas IAs"""
    
    def __init__(self, config_path: Optional[str] = None):
        """
        Inicializa o hub de integra√ß√£o de IA
        
        Args:
            config_path: Caminho para arquivo de configura√ß√£o customizado
        """
        self.config = self._load_config(config_path)
        self.logger = self._setup_logging()
        self.request_queue: List[AIRequest] = []
        self.active_requests: Dict[str, AIRequest] = {}
        self.providers: Dict[AIProvider, Dict[str, Any]] = {}
        self.session: Optional[aiohttp.ClientSession] = None
        
        # Estat√≠sticas do hub
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'providers_status': {},
            'start_time': datetime.now(timezone.utc)
        }
        
        self._initialize_providers()
        
    def _load_config(self, config_path: Optional[str] = None) -> Dict[str, Any]:
        """Carrega configura√ß√£o do hub"""
        default_config = {
            'hub': {
                'max_concurrent_requests': 10,
                'request_timeout': 300,
                'retry_attempts': 3,
                'log_level': 'INFO'
            },
            'providers': {
                'claude': {
                    'enabled': True,
                    'api_key_env': 'CLAUDE_API_KEY',
                    'base_url': 'https://api.anthropic.com/v1',
                    'model': 'claude-3-sonnet-20240229',
                    'max_tokens': 4000,
                    'rate_limit': 5  # requests per minute
                },
                'gpt': {
                    'enabled': True,
                    'api_key_env': 'OPENAI_API_KEY',
                    'base_url': 'https://api.openai.com/v1',
                    'model': 'gpt-4-turbo-preview',
                    'max_tokens': 4000,
                    'rate_limit': 10
                },
                'gemini': {
                    'enabled': True,
                    'api_key_env': 'GEMINI_API_KEY',
                    'base_url': 'https://generativelanguage.googleapis.com/v1',
                    'model': 'gemini-pro',
                    'max_tokens': 2048,
                    'rate_limit': 15
                },
                'warp_agent': {
                    'enabled': True,
                    'local': True,
                    'manual_path': 'docs/ai-operations-manual.md',
                    'parser_script': 'scripts/ai-manual-parser.py'
                }
            },
            'operations': {
                'allowed_commands': [
                    'Verificar Status do Sistema',
                    'Monitorar Recursos',
                    'An√°lise de Logs',
                    'Health Check',
                    'Deploy Status',
                    'Security Check'
                ],
                'emergency_only': [
                    'Restart Services',
                    'Rollback Deployment',
                    'Security Incident Response'
                ]
            },
            'notifications': {
                'slack_webhook': os.getenv('SLACK_WEBHOOK_URL'),
                'email_enabled': False,
                'pagerduty_key': os.getenv('PAGERDUTY_INTEGRATION_KEY')
            }
        }
        
        if config_path and os.path.exists(config_path):
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    custom_config = json.load(f)
                    default_config.update(custom_config)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar config customizada: {e}")
        
        return default_config
    
    def _setup_logging(self) -> logging.Logger:
        """Configura sistema de logging"""
        log_level = getattr(logging, self.config['hub'].get('log_level', 'INFO'))
        
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('ai_integration_hub.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        return logging.getLogger(__name__)
    
    def _initialize_providers(self):
        """Inicializa provedores de IA"""
        self.logger.info("üöÄ Inicializando provedores de IA...")
        
        for provider_name, config in self.config['providers'].items():
            if not config.get('enabled', False):
                continue
                
            provider = AIProvider(provider_name)
            self.providers[provider] = {
                'config': config,
                'status': 'initializing',
                'requests_count': 0,
                'last_request': None,
                'rate_limit_reset': datetime.now(timezone.utc)
            }
            
            # Verificar depend√™ncias do provedor
            if not config.get('local', False):
                api_key_env = config.get('api_key_env')
                if api_key_env and not os.getenv(api_key_env):
                    self.logger.warning(
                        f"‚ö†Ô∏è API key n√£o encontrada para {provider_name}: {api_key_env}"
                    )
                    self.providers[provider]['status'] = 'disabled'
                else:
                    self.providers[provider]['status'] = 'ready'
            else:
                self.providers[provider]['status'] = 'ready'
        
        self.logger.info(
            f"‚úÖ {len([p for p in self.providers.values() if p['status'] == 'ready'])} "
            f"provedores prontos de {len(self.providers)} configurados"
        )

    async def __aenter__(self):
        """Context manager entry"""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        if self.session:
            await self.session.close()

    # ============================================
    # üéØ Gerenciamento de Requisi√ß√µes
    # ============================================

    def submit_request(
        self, 
        provider: Union[AIProvider, str], 
        operation: str,
        parameters: Dict[str, Any],
        priority: int = 5
    ) -> str:
        """
        Submete uma nova requisi√ß√£o para processamento
        
        Args:
            provider: Provedor de IA
            operation: Opera√ß√£o a ser executada
            parameters: Par√¢metros da opera√ß√£o
            priority: Prioridade (1=alta, 10=baixa)
            
        Returns:
            ID da requisi√ß√£o
        """
        if isinstance(provider, str):
            provider = AIProvider(provider)
        
        # Validar provedor
        if provider not in self.providers:
            raise ValueError(f"Provedor n√£o configurado: {provider.value}")
        
        if self.providers[provider]['status'] != 'ready':
            raise ValueError(f"Provedor n√£o dispon√≠vel: {provider.value}")
        
        # Validar opera√ß√£o
        allowed_ops = self.config['operations']['allowed_commands']
        emergency_ops = self.config['operations']['emergency_only']
        
        if operation not in allowed_ops and operation not in emergency_ops:
            raise ValueError(f"Opera√ß√£o n√£o permitida: {operation}")
        
        # Criar requisi√ß√£o
        request_id = f"{provider.value}_{int(time.time() * 1000)}"
        request = AIRequest(
            id=request_id,
            provider=provider,
            operation=operation,
            parameters=parameters,
            priority=priority
        )
        
        # Adicionar √† fila ordenada por prioridade
        self.request_queue.append(request)
        self.request_queue.sort(key=lambda r: r.priority)
        
        self.stats['total_requests'] += 1
        self.logger.info(
            f"üìù Nova requisi√ß√£o: {request_id} ({provider.value}) - {operation}"
        )
        
        return request_id

    async def process_requests(self):
        """Processa requisi√ß√µes na fila"""
        self.logger.info("üîÑ Iniciando processamento de requisi√ß√µes...")
        
        max_concurrent = self.config['hub']['max_concurrent_requests']
        
        while True:
            # Processar requisi√ß√µes pendentes
            while (
                self.request_queue and 
                len(self.active_requests) < max_concurrent
            ):
                request = self.request_queue.pop(0)
                self.active_requests[request.id] = request
                
                # Processar requisi√ß√£o de forma ass√≠ncrona
                asyncio.create_task(self._process_single_request(request))
            
            # Aguardar um pouco antes da pr√≥xima verifica√ß√£o
            await asyncio.sleep(1)
    
    async def _process_single_request(self, request: AIRequest):
        """Processa uma √∫nica requisi√ß√£o"""
        start_time = time.time()
        
        try:
            request.status = RequestStatus.PROCESSING
            self.logger.info(f"üîÑ Processando: {request.id}")
            
            # Executar baseado no provedor
            if request.provider == AIProvider.WARP_AGENT:
                result = await self._process_warp_agent(request)
            else:
                result = await self._process_api_provider(request)
            
            request.result = result
            request.status = RequestStatus.COMPLETED
            self.stats['successful_requests'] += 1
            
            self.logger.info(f"‚úÖ Conclu√≠do: {request.id}")
            
        except Exception as e:
            request.error = str(e)
            request.status = RequestStatus.FAILED
            self.stats['failed_requests'] += 1
            
            self.logger.error(f"‚ùå Falhou: {request.id} - {e}")
            
            # Notificar falha cr√≠tica
            await self._notify_failure(request, e)
        
        finally:
            request.execution_time = time.time() - start_time
            
            # Remover da lista ativa
            if request.id in self.active_requests:
                del self.active_requests[request.id]
            
            # Atualizar estat√≠sticas do provedor
            self.providers[request.provider]['requests_count'] += 1
            self.providers[request.provider]['last_request'] = datetime.now(timezone.utc)

    async def _process_warp_agent(self, request: AIRequest) -> Dict[str, Any]:
        """Processa requisi√ß√£o para Warp Agent (local)"""
        parser_script = self.providers[AIProvider.WARP_AGENT]['config']['parser_script']
        
        # Construir comando
        cmd_parts = ['python', parser_script]
        
        if request.operation in self.config['operations']['allowed_commands']:
            cmd_parts.extend(['--command', f'"{request.operation}"'])
        
        # Adicionar par√¢metros
        if request.parameters.get('dry_run', True):
            cmd_parts.append('--dry-run')
        
        # Executar comando
        proc = await asyncio.create_subprocess_exec(
            *cmd_parts,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await proc.communicate()
        
        if proc.returncode != 0:
            raise Exception(f"Warp Agent error: {stderr.decode()}")
        
        return {
            'output': stdout.decode(),
            'exit_code': proc.returncode,
            'command': ' '.join(cmd_parts)
        }

    async def _process_api_provider(self, request: AIRequest) -> Dict[str, Any]:
        """Processa requisi√ß√£o para provedor de API externa"""
        provider_config = self.providers[request.provider]['config']
        
        # Preparar headers
        headers = {'Content-Type': 'application/json'}
        
        # Adicionar autentica√ß√£o
        api_key = os.getenv(provider_config['api_key_env'])
        if not api_key:
            raise Exception(f"API key n√£o encontrada: {provider_config['api_key_env']}")
        
        if request.provider == AIProvider.CLAUDE:
            headers['x-api-key'] = api_key
            headers['anthropic-version'] = '2023-06-01'
        elif request.provider == AIProvider.GPT:
            headers['Authorization'] = f'Bearer {api_key}'
        elif request.provider == AIProvider.GEMINI:
            # Gemini usa API key na URL
            pass
        
        # Preparar payload
        payload = self._prepare_api_payload(request, provider_config)
        
        # Fazer requisi√ß√£o
        url = self._build_api_url(request.provider, provider_config)
        
        timeout = aiohttp.ClientTimeout(total=self.config['hub']['request_timeout'])
        
        async with self.session.post(url, json=payload, headers=headers, timeout=timeout) as response:
            if response.status != 200:
                error_text = await response.text()
                raise Exception(f"API error {response.status}: {error_text}")
            
            return await response.json()

    def _prepare_api_payload(self, request: AIRequest, config: Dict[str, Any]) -> Dict[str, Any]:
        """Prepara payload para API do provedor"""
        operation_prompt = self._build_operation_prompt(request)
        
        if request.provider == AIProvider.CLAUDE:
            return {
                "model": config['model'],
                "max_tokens": config['max_tokens'],
                "messages": [
                    {
                        "role": "user",
                        "content": operation_prompt
                    }
                ]
            }
        
        elif request.provider == AIProvider.GPT:
            return {
                "model": config['model'],
                "max_tokens": config['max_tokens'],
                "messages": [
                    {
                        "role": "user",
                        "content": operation_prompt
                    }
                ]
            }
        
        elif request.provider == AIProvider.GEMINI:
            return {
                "contents": [
                    {
                        "parts": [
                            {"text": operation_prompt}
                        ]
                    }
                ],
                "generationConfig": {
                    "maxOutputTokens": config['max_tokens']
                }
            }
        
        else:
            raise ValueError(f"Payload n√£o implementado para: {request.provider}")

    def _build_api_url(self, provider: AIProvider, config: Dict[str, Any]) -> str:
        """Constr√≥i URL da API"""
        base_url = config['base_url']
        
        if provider == AIProvider.CLAUDE:
            return f"{base_url}/messages"
        elif provider == AIProvider.GPT:
            return f"{base_url}/chat/completions"
        elif provider == AIProvider.GEMINI:
            api_key = os.getenv(config['api_key_env'])
            return f"{base_url}/models/{config['model']}:generateContent?key={api_key}"
        else:
            raise ValueError(f"URL n√£o implementada para: {provider}")

    def _build_operation_prompt(self, request: AIRequest) -> str:
        """Constr√≥i prompt para a opera√ß√£o"""
        base_prompt = f"""
Voc√™ √© um assistente de IA especializado em opera√ß√µes de infraestrutura.
Execute a seguinte opera√ß√£o: {request.operation}

Par√¢metros:
{json.dumps(request.parameters, indent=2)}

Contexto:
- Este √© um sistema de automa√ß√£o de organiza√ß√µes
- Voc√™ deve seguir as melhores pr√°ticas de seguran√ßa
- Forne√ßa respostas estruturadas e acion√°veis
- Se necess√°rio, sugira pr√≥ximos passos

Responda no formato JSON com as seguintes chaves:
- "status": "success" ou "error"
- "data": dados da opera√ß√£o
- "message": mensagem explicativa
- "next_actions": lista de pr√≥ximas a√ß√µes sugeridas (se aplic√°vel)
"""
        
        # Adicionar contexto espec√≠fico baseado na opera√ß√£o
        if request.operation == "Verificar Status do Sistema":
            base_prompt += "\nFoque em m√©tricas de CPU, mem√≥ria, disco e rede."
        elif request.operation == "An√°lise de Logs":
            base_prompt += "\nAnalise padr√µes, erros e anomalias nos logs."
        elif request.operation == "Security Check":
            base_prompt += "\nVerifique vulnerabilidades e configura√ß√µes de seguran√ßa."
        
        return base_prompt

    # ============================================
    # üìä Monitoramento e Estat√≠sticas
    # ============================================

    def get_status(self) -> Dict[str, Any]:
        """Retorna status atual do hub"""
        uptime = datetime.now(timezone.utc) - self.stats['start_time']
        
        return {
            'hub_status': 'active',
            'uptime_seconds': uptime.total_seconds(),
            'statistics': self.stats.copy(),
            'queue_size': len(self.request_queue),
            'active_requests': len(self.active_requests),
            'providers': {
                provider.value: {
                    'status': config['status'],
                    'requests_count': config['requests_count'],
                    'last_request': config['last_request'].isoformat() if config['last_request'] else None
                }
                for provider, config in self.providers.items()
            },
            'performance': {
                'success_rate': (
                    self.stats['successful_requests'] / max(self.stats['total_requests'], 1)
                ) * 100,
                'avg_queue_wait': self._calculate_avg_wait_time(),
                'provider_availability': self._calculate_provider_availability()
            }
        }

    def _calculate_avg_wait_time(self) -> float:
        """Calcula tempo m√©dio de espera na fila"""
        if not self.request_queue:
            return 0.0
        
        now = datetime.now(timezone.utc)
        total_wait = sum(
            (now - req.created_at).total_seconds() 
            for req in self.request_queue
        )
        
        return total_wait / len(self.request_queue)

    def _calculate_provider_availability(self) -> Dict[str, float]:
        """Calcula disponibilidade dos provedores"""
        availability = {}
        
        for provider, config in self.providers.items():
            if config['requests_count'] == 0:
                availability[provider.value] = 100.0
            else:
                # Simplificado: baseado no status atual
                availability[provider.value] = 100.0 if config['status'] == 'ready' else 0.0
        
        return availability

    async def _notify_failure(self, request: AIRequest, error: Exception):
        """Notifica falha cr√≠tica"""
        notification_data = {
            'request_id': request.id,
            'provider': request.provider.value,
            'operation': request.operation,
            'error': str(error),
            'timestamp': datetime.now(timezone.utc).isoformat()
        }
        
        # Slack
        slack_url = self.config['notifications']['slack_webhook']
        if slack_url and self.session:
            try:
                await self.session.post(
                    slack_url,
                    json={
                        'text': f'üö® AI Hub Failure: {request.operation}',
                        'attachments': [{
                            'color': 'danger',
                            'fields': [
                                {'title': 'Provider', 'value': request.provider.value, 'short': True},
                                {'title': 'Operation', 'value': request.operation, 'short': True},
                                {'title': 'Error', 'value': str(error)[:500], 'short': False}
                            ]
                        }]
                    }
                )
            except Exception as e:
                self.logger.error(f"Falha ao enviar notifica√ß√£o Slack: {e}")

    # ============================================
    # üéõÔ∏è Interface de Linha de Comando
    # ============================================

    def list_providers(self):
        """Lista provedores dispon√≠veis"""
        print("ü§ñ Provedores de IA Configurados:")
        print("=" * 50)
        
        for provider, config in self.providers.items():
            status_emoji = {
                'ready': '‚úÖ',
                'disabled': '‚ùå', 
                'initializing': 'üîÑ'
            }.get(config['status'], '‚ùì')
            
            print(f"{status_emoji} {provider.value.upper()}")
            print(f"   Status: {config['status']}")
            print(f"   Requests: {config['requests_count']}")
            
            if config['last_request']:
                print(f"   √öltima Req: {config['last_request']}")
            
            print()

    def list_operations(self):
        """Lista opera√ß√µes dispon√≠veis"""
        print("üéØ Opera√ß√µes Dispon√≠veis:")
        print("=" * 50)
        
        print("üìã Comandos Regulares:")
        for cmd in self.config['operations']['allowed_commands']:
            print(f"   ‚Ä¢ {cmd}")
        
        print("\nüö® Comandos de Emerg√™ncia:")
        for cmd in self.config['operations']['emergency_only']:
            print(f"   ‚Ä¢ {cmd}")

# ============================================
# üöÄ Fun√ß√£o Principal
# ============================================

async def main():
    """Fun√ß√£o principal do hub"""
    parser = argparse.ArgumentParser(
        description="ü§ñ AI Integration Hub - Hub Central de M√∫ltiplas IAs"
    )
    
    parser.add_argument(
        '--config', 
        help='Arquivo de configura√ß√£o customizado'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Comando start - iniciar hub
    start_parser = subparsers.add_parser('start', help='Iniciar hub de IA')
    start_parser.add_argument(
        '--daemon', 
        action='store_true', 
        help='Executar como daemon'
    )
    
    # Comando status - mostrar status
    status_parser = subparsers.add_parser('status', help='Mostrar status do hub')
    
    # Comando request - fazer requisi√ß√£o
    request_parser = subparsers.add_parser('request', help='Fazer requisi√ß√£o para IA')
    request_parser.add_argument('provider', help='Provedor de IA')
    request_parser.add_argument('operation', help='Opera√ß√£o a executar')
    request_parser.add_argument(
        '--parameters', 
        default='{}', 
        help='Par√¢metros JSON da opera√ß√£o'
    )
    request_parser.add_argument(
        '--priority', 
        type=int, 
        default=5, 
        help='Prioridade (1-10)'
    )
    
    # Comando list - listar informa√ß√µes
    list_parser = subparsers.add_parser('list', help='Listar informa√ß√µes')
    list_subparsers = list_parser.add_subparsers(dest='list_type')
    list_subparsers.add_parser('providers', help='Listar provedores')
    list_subparsers.add_parser('operations', help='Listar opera√ß√µes')
    
    args = parser.parse_args()
    
    # Executar comando
    async with AIIntegrationHub(args.config) as hub:
        
        if args.command == 'start':
            if args.daemon:
                print("üöÄ Iniciando AI Hub em modo daemon...")
                await hub.process_requests()
            else:
                print("üöÄ AI Hub inicializado. Use Ctrl+C para parar.")
                try:
                    await hub.process_requests()
                except KeyboardInterrupt:
                    print("\nüëã AI Hub finalizado.")
        
        elif args.command == 'status':
            status = hub.get_status()
            print("üìä Status do AI Integration Hub:")
            print("=" * 50)
            print(json.dumps(status, indent=2, default=str))
        
        elif args.command == 'request':
            try:
                parameters = json.loads(args.parameters)
                request_id = hub.submit_request(
                    args.provider,
                    args.operation, 
                    parameters,
                    args.priority
                )
                print(f"‚úÖ Requisi√ß√£o submetida: {request_id}")
            except Exception as e:
                print(f"‚ùå Erro ao submeter requisi√ß√£o: {e}")
                sys.exit(1)
        
        elif args.command == 'list':
            if args.list_type == 'providers':
                hub.list_providers()
            elif args.list_type == 'operations':
                hub.list_operations()
            else:
                print("‚ùì Tipo de listagem inv√°lido. Use: providers, operations")
        
        else:
            parser.print_help()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã AI Integration Hub finalizado.")
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        sys.exit(1)